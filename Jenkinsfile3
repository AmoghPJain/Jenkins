pipeline{
    agent any

    stages {

        stage('Checkout') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') { 
                // This is accessing credentials of type usernamePassword
                withCredentials([usernamePassword(credentialsId: 'github', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]){
                    echo "$GIT_USERNAME"
                    echo "$GIT_PASSWORD"
                    sh '''
                        git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/AmoghPJain/Python.git
                    '''
            }
            }
        }
    }

        stage('Checkout1') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                //This is accessing credentials of type secret text
                withCredentials([string(credentialsId: 'secret_text', variable: 'SECRET_TEXT')]) {
                    echo "secret text : $SECRET_TEXT"
            }
            }

        }
    }

        stage('Checkout2') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                //This is accessing credentials of type secret file
                withCredentials([file(credentialsId: 'secret_file', variable: 'FILE_PATH')]) {
                    echo "file path: $FILE_PATH"
                    sh '''
                        echo "Contents of the file:"
                        cat $FILE_PATH
                    '''
            }
            }

        }
    }    

        stage('Checkout3') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                //This is accessing credentials of type sshUserPrivateKey
                withCredentials([sshUserPrivateKey(credentialsId: 'ssh_pem', usernameVariable: 'USER', keyFileVariable: 'SSH_KEY')]) {
                    echo "usernameVariable: $USER"
                    echo "keyFileVariable: $SSH_KEY"
            }
            }
        }
    }     

        }
  }